//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

enum UserRole {
  SEEKER
  EMPLOYER
  ADMIN
}

enum SalaryType {
  MONTHLY
  ONE_OFF
  PER_HOUR
  PER_DAY
  PER_WEEK
  PER_YEAR
}

enum JobStatus {
  APPROVED
  ARCHIVED
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  OTHER
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().role == 'ADMIN')
/// @@allow('create', role != 'ADMIN')
/// @@allow('read', true)
model User {
  id               String        @id() @default(uuid())
  name             String?
  email            String?       @unique()
  pictureUrl       String?       @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation  String?
  stripeCustomerId String?
  status           UserStatus    @default(VERIFIED)
  /// @password
  /// @omit
  password         String?
  dateCreated      DateTime      @default(now())
  dateUpdated      DateTime      @default(now()) @updatedAt()
  accounts         Account[]
  sessions         Session[]
  role             UserRole?     @default(SEEKER)
  companyId        String?
  company          Company?      @relation(fields: [companyId], references: [id], name: "company")
  applications     Application[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('create, read', true)
/// @@allow('update, delete', auth().companyId == id)
/// @@allow('all', auth().role == 'ADMIN')
model Company {
  id          String     @id() @default(uuid())
  name        String
  address     String?
  website     String?
  logo        String?
  users       User[]     @relation("company")
  jobOffers   JobOffer[] @relation("company")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('create, read', true)
/// @@allow('update, delete', auth().companyId == companyId)
/// @@allow('all', auth().role == 'ADMIN')
model JobOffer {
  id                           String         @id() @default(uuid())
  title                        String
  description                  String
  location                     String?
  tags                         String?
  applicationDocumentsRequired DocumentType[]
  companyId                    String
  salary                       Float?
  salaryType                   SalaryType?
  salaryCurrency               String?
  status                       JobStatus      @default(APPROVED)
  company                      Company?       @relation(fields: [companyId], references: [id], name: "company")
  applications                 Application[]  @relation("jobOffer")
  attachments                  Document[]     @relation("jobOfferAttachments")
  dateCreated                  DateTime       @default(now())
  dateUpdated                  DateTime       @default(now()) @updatedAt()
}

/// @@allow('create, read', true)
/// @@allow('update, delete', auth().id == userId)
/// @@allow('all', auth().role == 'ADMIN')
model Application {
  id          String     @id() @default(uuid())
  documents   Document[]
  jobOfferId  String
  jobOffer    JobOffer?  @relation(fields: [jobOfferId], references: [id], name: "jobOffer")
  userId      String
  user        User?      @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Document {
  id            String       @id() @default(uuid())
  url           String
  name          String?
  type          DocumentType @default(OTHER)
  applicationId String?
  application   Application? @relation(fields: [applicationId], references: [id])
  jobOfferId    String?
  jobOffer      JobOffer?    @relation("jobOfferAttachments", fields: [jobOfferId], references: [id])
}
